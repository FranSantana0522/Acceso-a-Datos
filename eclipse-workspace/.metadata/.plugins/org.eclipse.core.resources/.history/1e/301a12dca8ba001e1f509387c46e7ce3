import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import dao.AutorDao;
import dao.EjemplarDao;
import dao.LibroDao;
import dao.PrestamoDao;
import dao.UsuarioDao;
import dominio.Autor;
import dominio.Ejemplar;
import dominio.Libro;
import dominio.Prestamo;
import dominio.Usuario;

public class App {

	public static void main(String[] args) {
		// 1. Crear dos autores y un libro, y asociarlos: esos dos autores
		//    han escrito ese libro. Volcar la información en la BD.
		
		AutorDao autorDao=new AutorDao();
		Autor autor=new Autor("Marco");
		Autor autor2=new Autor("Polo");
		autorDao.save(autor);
		autorDao.save(autor2);
		
		LibroDao libroDao=new LibroDao();
		Libro libro=new Libro("Titulo 1","1","Editorial 1",300);
		Libro libro2=new Libro("Titulo 2","2","Editorial 2",330);
		libroDao.save(libro);
		libroDao.save(libro2);
		
		libro.addAutor(autor);
		libro.addAutor(autor2);
		
		
		
		// 2. Crear dos ejemplares del libro anterior, y volcar en BD
		
		EjemplarDao ejemplarDao=new EjemplarDao();
		Ejemplar ejemplar=new Ejemplar("1","Biblioteca Sevilla",libro);
		Ejemplar ejemplar2=new Ejemplar("2","Biblioteca Sevilla",libro);
		ejemplarDao.save(ejemplar);
		ejemplarDao.save(ejemplar2);
		
		// 3. Crear dos usuarios y prestar un ejemplar a cada uno, indicando
		//    en los dos la fecha de préstamo, y sólo en uno de los préstamos
		//    la fecha de devolución.
		
		UsuarioDao usuarioDao=new UsuarioDao();
		Usuario usuario=new Usuario("Pedrito");
		Usuario usuario2=new Usuario("Pedrita");
		usuarioDao.save(usuario);
		usuarioDao.save(usuario2);
					
		PrestamoDao prestamoDao=new PrestamoDao();
		Prestamo prestamo=new Prestamo(usuario,ejemplar,LocalDateTime.of(2023, 12, 27, 9, 50),LocalDateTime.of(2024, 1, 7, 9, 50));
		Prestamo prestamo2=new Prestamo(usuario2,ejemplar2,LocalDateTime.of(2023, 12, 27, 9, 50));
		prestamoDao.save(prestamo);
		prestamoDao.save(prestamo2);
		
//		4. Recupera de BD uno de los objetos creados y guardados
//		anteriormente (aunque lo tengas accesible directamente,
//		supongamos que no, y que tienes que recuperarlo de bd). Puede
//		ser un usuario, un libro, un autor o un ejemplar.
		
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection conexion=DriverManager.getConnection("jdbc:mysql://localhost:3306/bibliotecas?useSSL=false"
					,"bibliotecasuser", "bibliotecaspassword");
			
			Statement sentencia=conexion.createStatement();
			ResultSet consulta=sentencia.executeQuery("select * from libro where id=2");
			System.out.println("Voy a coger el libro con id 2");
			while(consulta.next()) {
				System.out.printf("%d, %s, %s, %d, %s  %n", consulta.getInt(1),consulta.getString(2),consulta.getString(3),consulta.getInt(4),consulta.getString(5));
			}
			consulta.close();
			sentencia.close();
			conexion.close();
		} catch (ClassNotFoundException e) {
		    e.printStackTrace();
		} catch (SQLException e) {
		    e.printStackTrace();
		}
		
		if(!libroDao.get(2).isEmpty()) {
			System.out.println(libroDao.get(2));
		}else {
			System.out.println("No hay libro con id 2");
		}
		
		
//		5. A continuación, bórralo.
		
		try {
		    Class.forName("com.mysql.cj.jdbc.Driver");
		    Connection conexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/bibliotecas?useSSL=false",
		            "bibliotecasuser", "bibliotecaspassword");

		    Statement sentencia = conexion.createStatement();
		    System.out.println("Voy a borrar el libro con id 2");
		    int id = 2;
		    int lineasAfectadas = sentencia.executeUpdate("delete from libro where id=" + id);
		    
		    if (lineasAfectadas > 0) {
		        System.out.println("Libro con id " + id + " borrado");
		    } else {
		        System.out.println("No se encontró ningún libro con id " + id);
		    }

		    sentencia.close();
		    conexion.close();
		} catch (ClassNotFoundException e) {
		    e.printStackTrace();
		} catch (SQLException e) {
		    e.printStackTrace();
		}
		
//		6. Consulta los préstamos que no han sido devueltos y muéstralos.
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection conexion=DriverManager.getConnection("jdbc:mysql://localhost:3306/bibliotecas?useSSL=false"
					,"bibliotecasuser", "bibliotecaspassword");
			
			Statement sentencia=conexion.createStatement();
			ResultSet consulta=sentencia.executeQuery("select * from prestamo where fecha_devolucion is null;");
			System.out.println("Voy a mostrar un prestamo que no se ha devuelto");
			while(consulta.next()) {
				System.out.printf("%s, %s,%d, %d  %n", consulta.getString(1),consulta.getString(2),consulta.getInt(3),consulta.getInt(4));
			}
			consulta.close();
			sentencia.close();
			conexion.close();
		} catch (ClassNotFoundException e) {
		    e.printStackTrace();
		} catch (SQLException e) {
		    e.printStackTrace();
		}
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("BibliotecaEX");

        // Crear el EntityManager
        EntityManager em = emf.createEntityManager();
        List<Prestamo> prestamosNoDevueltos = new Prestamo().getPrestamosNoDevueltos(em);
		for(Prestamo prestamo:) {
			
		}
        
		
//		7. Consulta los ejemplares de los libros de más de 30 páginas y
//		muéstralos.
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection conexion=DriverManager.getConnection("jdbc:mysql://localhost:3306/bibliotecas?useSSL=false"
					,"bibliotecasuser", "bibliotecaspassword");
			
			Statement sentencia=conexion.createStatement();
			ResultSet consulta=sentencia.executeQuery("select ejemplar.*, libro.paginas from ejemplar join libro on ejemplar.libro_id=libro.id where libro.paginas>30;");
			System.out.println("Voy a mostrar los ejemplares que su libro tenga mas de 30 paginas");
			while(consulta.next()) {
				System.out.printf("%d, %d, %s, %d, %d  %n", consulta.getInt(1),consulta.getInt(2),consulta.getString(3),consulta.getInt(4),consulta.getInt(5));
			}
			consulta.close();
			sentencia.close();
			conexion.close();
		} catch (ClassNotFoundException e) {
		    e.printStackTrace();
		} catch (SQLException e) {
		    e.printStackTrace();
		}
	}
}